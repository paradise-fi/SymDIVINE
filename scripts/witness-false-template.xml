<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://graphml.graphdrawing.org/xmlns">
  <key attr.name="nodeType" attr.type="string" for="node" id="nodetype">
    <default>path</default>
  </key>
  <key attr.name="isFrontierNode" attr.type="boolean" for="node" id="frontier">
    <default>false</default>
  </key>
  <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
    <default>false</default>
  </key>
  <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
    <default>false</default>
  </key>
  <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
    <default>false</default>
  </key>
  <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
  <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
  <key attr.name="namedValue" attr.type="string" for="node" id="named"/>
  <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
  <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
  <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
  <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
  <key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/>
  <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
  <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
  <key attr.name="programhash" attr.type="string" for="graph" id="programhash"/>
  <key attr.name="sourcecode" attr.type="string" for="edge" id="sourcecode"/>
  <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
  <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
  <key attr.name="lineColSet" attr.type="string" for="edge" id="lineCols"/>
  <key attr.name="control" attr.type="string" for="edge" id="control"/>
  <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
  <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
  <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
  <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
  <key attr.name="predecessor" attr.type="string" for="edge" id="predecessor"/>
  <key attr.name="successor" attr.type="string" for="edge" id="successor"/>
  <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
  <graph edgedefault="directed">
    <data key="witness-type">violation_witness</data>
    <data key="sourcecodelang">C</data>
    <data key="producer">SymDIVINE</data>
    <data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data>
    <data key="programfile">{PROGRAM}</data>
    <data key="memorymodel">precise</data>
    <data key="programhash">{HASH}</data>
    <data key="architecture">{ARCH}</data>
    <node id="0">
      <data key="entry">true</data>
    </node>
    <node id="1">
      <data key="violation">true</data>
    </node>
    <edge source="0" target="1" />
  </graph>
</graphml>
